{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-03-08T01:56:06.675247Z", "invocation_id": "ca9de98e-03a1-4516-8077-2a5608cc10ed", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-08T01:56:06.205472Z", "completed_at": "2025-03-08T01:56:06.223364Z"}, {"name": "execute", "started_at": "2025-03-08T01:56:06.236143Z", "completed_at": "2025-03-08T01:56:06.602590Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4290757179260254, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.zap_imoveis.gold_flat_kit_studio_avg_prices", "compiled": true, "compiled_code": "with source as (\n    SELECT * FROM \"foo\".\"zap\".\"silver_zapimoveis\" \n    WHERE \n\tkind LIKE 'Flats%' OR \n\tKIND LIKE 'Studios%' OR \n\tKIND LIKE 'Kitnets'\n),\nfinal as (\n\tselect \n\tneighborhood,\n\tcount(id) as sample_size,\n\tROUND(avg(floor_size),2 ) as floor_size_avg,\n\tROUND(avg(price_rent), 2) as price_rent_avg,\n\tROUND(avg(price_condominium), 2) as price_condominium_avg,\n\tROUND(avg(rent_plus_condo), 2) as rent_plus_condo_avg,\n\tROUND(avg(price_rent) / avg(floor_size) , 2) as price_rent_per_m2_avg,\n\tROUND(avg(rent_plus_condo) / avg(floor_size), 2) as rent_plus_condo__per_m2_avg,\n\tROUND(avg(price_sale), 2) as price_sale_avg,\n\tROUND(avg(price_sale) / avg(floor_size), 2) as price_sale_per_m2_avg\n\tfrom source \n\tgroup by neighborhood \n)\nselect * from final \norder by price_rent_per_m2_avg desc", "relation_name": "\"foo\".\"zap\".\"gold_flat_kit_studio_avg_prices\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-08T01:56:06.216868Z", "completed_at": "2025-03-08T01:56:06.257050Z"}, {"name": "execute", "started_at": "2025-03-08T01:56:06.274390Z", "completed_at": "2025-03-08T01:56:06.637538Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.456087589263916, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.zap_imoveis.gold_house_avg_prices", "compiled": true, "compiled_code": "with source as (\n    SELECT * FROM \"foo\".\"zap\".\"silver_zapimoveis\" \n    WHERE kind LIKE 'casas%'\n),\nfinal as (\n\tselect \n\tneighborhood,\n\tcount(id) as sample_size,\n\tROUND(avg(floor_size),2 ) as floor_size_avg,\n\tROUND(avg(price_rent), 2) as price_rent_avg,\n\tROUND(avg(price_condominium), 2) as price_condominium_avg,\n\tROUND(avg(rent_plus_condo), 2) as rent_plus_condo_avg,\n\tROUND(avg(price_rent) / avg(floor_size) , 2) as price_rent_per_m2_avg,\n\tROUND(avg(rent_plus_condo) / avg(floor_size), 2) as rent_plus_condo__per_m2_avg,\n\tROUND(avg(price_sale), 2) as price_sale_avg,\n\tROUND(avg(price_sale) / avg(floor_size), 2) as price_sale_per_m2_avg\n\tfrom source \n\tgroup by neighborhood \n)\nselect * from final \norder by price_rent_per_m2_avg desc", "relation_name": "\"foo\".\"zap\".\"gold_house_avg_prices\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-08T01:56:06.191384Z", "completed_at": "2025-03-08T01:56:06.221899Z"}, {"name": "execute", "started_at": "2025-03-08T01:56:06.224762Z", "completed_at": "2025-03-08T01:56:06.640850Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4640078544616699, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.zap_imoveis.gold_apartment_avg_prices", "compiled": true, "compiled_code": "with source as (\n    SELECT * FROM \"foo\".\"zap\".\"silver_zapimoveis\" \n    WHERE kind like 'apartamentos%'\n),\nfinal as (\n\tselect \n\tneighborhood,\n\tcount(id) as sample_size,\n\tROUND(avg(floor_size),2 ) as floor_size_avg,\n\tROUND(avg(price_rent), 2) as price_rent_avg,\n\tROUND(avg(price_condominium), 2) as price_condominium_avg,\n\tROUND(avg(rent_plus_condo), 2) as rent_plus_condo_avg,\n\tROUND(avg(price_rent) / avg(floor_size) , 2) as price_rent_per_m2_avg,\n\tROUND(avg(rent_plus_condo) / avg(floor_size), 2) as rent_plus_condo__per_m2_avg,\n\tROUND(avg(price_sale), 2) as price_sale_avg,\n\tROUND(avg(price_sale) / avg(floor_size), 2) as price_sale_per_m2_avg\n\tfrom source \n\tgroup by neighborhood \n)\nselect * from final \norder by price_rent_per_m2_avg desc\n\n\n-- as avg ignores null values, we are getting the correct measures;", "relation_name": "\"foo\".\"zap\".\"gold_apartment_avg_prices\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-08T01:56:06.211127Z", "completed_at": "2025-03-08T01:56:06.229914Z"}, {"name": "execute", "started_at": "2025-03-08T01:56:06.246720Z", "completed_at": "2025-03-08T01:56:06.643720Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.462493896484375, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.zap_imoveis.gold_floorsize_ranked_avg_prices", "compiled": true, "compiled_code": "with source as (\n    SELECT * FROM \"foo\".\"zap\".\"silver_zapimoveis\" \n),\nrank_floorsize as (\n\tselect \n\t*, \n\tcase \n\t\twhen sz.floor_size > 20 and sz.floor_size <= 50\n\t\tthen 'C'\n\t\twhen sz.floor_size > 50 and sz.floor_size <= 80\n\t\tthen 'B'\n\t\twhen sz.floor_size > 80 and sz.floor_size <= 110\n\t\tthen 'A'\n        WHEN sz.floor_size > 110\n        THEN 'S'\n\tend as floor_size_rank\n\tfrom source sz \n)\nselect\n*,\nprice_rent/floor_size as price_rent_per_m2\nfrom rank_floorsize \norder by price_rent_per_m2", "relation_name": "\"foo\".\"zap\".\"gold_floorsize_ranked_avg_prices\"", "batch_results": null}], "elapsed_time": 0.6568479537963867, "args": {"populate_cache": true, "exclude": [], "write_json": true, "invocation_command": "dbt run", "select": [], "print": true, "quiet": false, "defer": false, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "printer_width": 80, "log_level": "info", "log_path": "/home/peon/projects/WebScrap/ZAP_IMOVEIS/logs", "source_freshness_run_project_hooks": false, "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "project_dir": "/home/peon/projects/WebScrap/ZAP_IMOVEIS", "which": "run", "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors_file": true, "version_check": true, "state_modified_compare_more_unrendered_values": false, "strict_mode": false, "require_yaml_configuration_for_mf_time_spines": false, "log_format_file": "debug", "profiles_dir": "/home/peon/projects/WebScrap/ZAP_IMOVEIS", "empty": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_nested_cumulative_type_params": false, "show_resource_report": false, "log_format": "default", "vars": {}, "cache_selected_only": false, "static_parser": true, "use_colors": true, "partial_parse": true, "favor_state": false, "skip_nodes_if_on_run_start_fails": false, "introspect": true, "log_level_file": "debug", "state_modified_compare_vars": false, "macro_debugging": false, "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false}}